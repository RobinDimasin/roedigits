generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Instructor {
  id        Int    @id @default(autoincrement())
  image     String @db.VarChar(1023)
  name      String @db.VarChar(1023)
  biography String @db.VarChar(1023)
}

model Category {
  id          Int      @id @default(autoincrement())
  image       String   @db.VarChar(1023)
  name        String   @db.VarChar(1023)
  description String   @db.VarChar(1023)
  courses     Course[]
}

model Bundle {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(1023)
  description String        @db.VarChar(1023)
  image       String        @db.VarChar(1023)
  createdAt   DateTime      @default(now())
  price       Decimal       @db.Decimal(13, 2)
  discount    Decimal       @db.Decimal(13, 2)
  features    String[]      @db.VarChar(1023)
  details     Details       @relation(fields: [detailsId], references: [id])
  detailsId   Int           @unique
  courses     Course[]
  users       UserProfile[]
}

model Course {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(1023)
  description String        @db.VarChar(1023)
  image       String        @db.VarChar(1023)
  createdAt   DateTime      @default(now())
  categories  Category[]
  curricula   Curriculum[]
  bundles     Bundle[]
  users       UserProfile[]
}

model Details {
  id                  Int      @id @default(autoincrement())
  title               String   @db.VarChar(1023)
  description         String   @db.VarChar(1023)
  whatYouWillLearn    String[] @db.VarChar(1023)
  whatYouWillBeAbleTo String[] @db.VarChar(1023)
  bundle              Bundle?
}

model Feature {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(1023)
  description String  @db.VarChar(1023)
  icon        String? @db.VarChar(1023)
}

model Curriculum {
  id          Int                 @id @default(autoincrement())
  title       String              @db.VarChar(1023)
  description String              @db.VarChar(1023)
  index       Int
  contents    CurriculumContent[]
  course      Course              @relation(fields: [courseId], references: [id])
  courseId    Int
}

model CurriculumContent {
  id           Int                    @id @default(autoincrement())
  title        String                 @db.VarChar(1023)
  description  String                 @db.VarChar(1023)
  index        Int
  curriculum   Curriculum             @relation(fields: [curriculumId], references: [id])
  curriculumId Int
  video        CurriculumContentVideo @relation(fields: [videoId], references: [id])
  videoId      Int                    @unique
}

model CurriculumContentVideo {
  id                Int                @id @default(autoincrement())
  link              String             @db.VarChar(1023)
  length            Int
  description       String             @db.VarChar(1023)
  curriculumContent CurriculumContent?
}

model Account {
  id       Int          @id @default(autoincrement())
  email    String       @unique @db.VarChar(1023)
  salt     String       @db.VarChar(1023)
  password String       @db.VarChar(1023)
  type     AccountType
  profile  UserProfile?
}

model UserProfile {
  id         Int      @id @default(autoincrement())
  account    Account  @relation(fields: [accountId], references: [id])
  accountId  Int      @unique
  lastName   String   @db.VarChar(1023)
  firstName  String   @db.VarChar(1023)
  middleName String?  @db.VarChar(1023)
  courses    Course[]
  bundles    Bundle[]
}

enum AccountType {
  ADMIN
  USER
}
